{"ast":null,"code":"import { createElement, Component, useRef, useState, useCallback, useEffect } from 'react';\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nvar ObserverMap = new Map();\nvar RootIds = new Map();\nvar rootId = 0;\n/**\r\n * Generate a unique ID for the root element\r\n * @param root\r\n */\n\nfunction getRootId(root) {\n  if (!root) return '0';\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n/**\r\n * Convert the options to a string Id, based on the values.\r\n * Ensures we can reuse the same observer when observing elements with the same options.\r\n * @param options\r\n */\n\nfunction optionsToId(options) {\n  return Object.keys(options).filter(Boolean).sort().map(function (key) {\n    return key + \"_\" + (key === 'root' ? getRootId(options.root) : options[key]);\n  }).toString();\n}\nfunction createObserver(options) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  var id = optionsToId(options);\n  var instance = ObserverMap.get(id);\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    var elements = new Map();\n    var observer = new IntersectionObserver(function (entries) {\n      entries.forEach(function (entry) {\n        var _elements$get;\n\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        var inView = entry.isIntersecting && observer.thresholds.some(function (threshold) {\n          return entry.intersectionRatio >= threshold;\n        }); // @ts-ignore support IntersectionObserver v2\n\n        if (options.trackVisibility && typeof entry.isVisible === 'undefined') {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n        (_elements$get = elements.get(entry.target)) == null ? void 0 : _elements$get.forEach(function (callback) {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n    instance = {\n      id: id,\n      observer: observer,\n      elements: elements\n    };\n    ObserverMap.set(id, instance);\n  }\n  return instance;\n}\nfunction observe(element, callback, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  if (!element) return function () {}; // An observer with the same options can be reused, so lets use this fact\n\n  var _createObserver = createObserver(options),\n    id = _createObserver.id,\n    observer = _createObserver.observer,\n    elements = _createObserver.elements; // Register the callback listener for this element\n\n  var callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n  callbacks.push(callback);\n  observer.observe(element);\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements[\"delete\"](element);\n      observer.unobserve(element);\n    }\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      ObserverMap[\"delete\"](id);\n    }\n  };\n}\nfunction isPlainChildren(props) {\n  return typeof props.children !== 'function';\n}\n/**\r\n * Monitors scroll, and triggers the children function with updated props\r\n */\n\nvar InView = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(InView, _React$Component);\n  function InView(props) {\n    var _this;\n    _this = _React$Component.call(this, props) || this;\n    _this.node = null;\n    _this._unobserveCb = null;\n    _this.handleNode = function (node) {\n      if (_this.node) {\n        // Clear the old observer, before we start observing a new element\n        _this.unobserve();\n        if (!node && !_this.props.triggerOnce && !_this.props.skip) {\n          // Reset the state if we get a new node, and we aren't ignoring updates\n          _this.setState({\n            inView: !!_this.props.initialInView,\n            entry: undefined\n          });\n        }\n      }\n      _this.node = node ? node : null;\n      _this.observeNode();\n    };\n    _this.handleChange = function (inView, entry) {\n      if (inView && _this.props.triggerOnce) {\n        // If `triggerOnce` is true, we should stop observing the element.\n        _this.unobserve();\n      }\n      if (!isPlainChildren(_this.props)) {\n        // Store the current State, so we can pass it to the children in the next render update\n        // There's no reason to update the state for plain children, since it's not used in the rendering.\n        _this.setState({\n          inView: inView,\n          entry: entry\n        });\n      }\n      if (_this.props.onChange) {\n        // If the user is actively listening for onChange, always trigger it\n        _this.props.onChange(inView, entry);\n      }\n    };\n    _this.state = {\n      inView: !!props.initialInView,\n      entry: undefined\n    };\n    return _this;\n  }\n  var _proto = InView.prototype;\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (prevProps.rootMargin !== this.props.rootMargin || prevProps.root !== this.props.root || prevProps.threshold !== this.props.threshold || prevProps.skip !== this.props.skip || prevProps.trackVisibility !== this.props.trackVisibility || prevProps.delay !== this.props.delay) {\n      this.unobserve();\n      this.observeNode();\n    }\n  };\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    this.unobserve();\n    this.node = null;\n  };\n  _proto.observeNode = function observeNode() {\n    if (!this.node || this.props.skip) return;\n    var _this$props = this.props,\n      threshold = _this$props.threshold,\n      root = _this$props.root,\n      rootMargin = _this$props.rootMargin,\n      trackVisibility = _this$props.trackVisibility,\n      delay = _this$props.delay;\n    this._unobserveCb = observe(this.node, this.handleChange, {\n      threshold: threshold,\n      root: root,\n      rootMargin: rootMargin,\n      // @ts-ignore\n      trackVisibility: trackVisibility,\n      // @ts-ignore\n      delay: delay\n    });\n  };\n  _proto.unobserve = function unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  };\n  _proto.render = function render() {\n    if (!isPlainChildren(this.props)) {\n      var _this$state = this.state,\n        inView = _this$state.inView,\n        entry = _this$state.entry;\n      return this.props.children({\n        inView: inView,\n        entry: entry,\n        ref: this.handleNode\n      });\n    }\n    var _this$props2 = this.props,\n      children = _this$props2.children,\n      as = _this$props2.as,\n      tag = _this$props2.tag,\n      props = _objectWithoutPropertiesLoose(_this$props2, [\"children\", \"as\", \"tag\", \"triggerOnce\", \"threshold\", \"root\", \"rootMargin\", \"onChange\", \"skip\", \"trackVisibility\", \"delay\", \"initialInView\"]);\n    return /*#__PURE__*/createElement(as || tag || 'div', _extends({\n      ref: this.handleNode\n    }, props), children);\n  };\n  return InView;\n}(Component);\nInView.displayName = 'InView';\nInView.defaultProps = {\n  threshold: 0,\n  triggerOnce: false,\n  initialInView: false\n};\nfunction useInView(_temp) {\n  var _ref = _temp === void 0 ? {} : _temp,\n    threshold = _ref.threshold,\n    delay = _ref.delay,\n    trackVisibility = _ref.trackVisibility,\n    rootMargin = _ref.rootMargin,\n    root = _ref.root,\n    triggerOnce = _ref.triggerOnce,\n    skip = _ref.skip,\n    initialInView = _ref.initialInView;\n  var unobserve = useRef();\n  var _React$useState = useState({\n      inView: !!initialInView\n    }),\n    state = _React$useState[0],\n    setState = _React$useState[1];\n  var setRef = useCallback(function (node) {\n    if (unobserve.current !== undefined) {\n      unobserve.current();\n      unobserve.current = undefined;\n    } // Skip creating the observer\n\n    if (skip) return;\n    if (node) {\n      unobserve.current = observe(node, function (inView, entry) {\n        setState({\n          inView: inView,\n          entry: entry\n        });\n        if (entry.isIntersecting && triggerOnce && unobserve.current) {\n          // If it should only trigger once, unobserve the element after it's inView\n          unobserve.current();\n          unobserve.current = undefined;\n        }\n      }, {\n        root: root,\n        rootMargin: rootMargin,\n        threshold: threshold,\n        // @ts-ignore\n        trackVisibility: trackVisibility,\n        // @ts-ignore\n        delay: delay\n      });\n    }\n  },\n  // We break the rule here, because we aren't including the actual `threshold` variable\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [\n  // If the threshold is an array, convert it to a string so it won't change between renders.\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  Array.isArray(threshold) ? threshold.toString() : threshold, root, rootMargin, triggerOnce, skip, trackVisibility, delay]);\n  /* eslint-disable-next-line */\n\n  useEffect(function () {\n    if (!unobserve.current && state.entry && !triggerOnce && !skip) {\n      // If we don't have a ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n      // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n      setState({\n        inView: !!initialInView\n      });\n    }\n  });\n  var result = [setRef, state.inView, state.entry]; // Support object destructuring, by adding the specific values.\n\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n  return result;\n}\nexport default InView;\nexport { InView, useInView };","map":{"version":3,"sources":["../src/observers.ts","../src/InView.tsx","../src/useInView.tsx"],"names":["ObserverMap","Map","RootIds","rootId","getRootId","root","has","get","set","toString","optionsToId","options","keys","filter","Boolean","sort","map","key","createObserver","id","instance","elements","observer","IntersectionObserver","entries","forEach","entry","inView","isIntersecting","thresholds","some","threshold","intersectionRatio","trackVisibility","isVisible","target","callback","observe","element","callbacks","push","unobserve","splice","indexOf","length","size","disconnect","isPlainChildren","props","children","InView","React","triggerOnce","initialInView","state","undefined","componentDidUpdate","prevProps","rootMargin","skip","delay","observeNode","componentWillUnmount","node","_unobserveCb","handleChange","setState","onChange","render","ref","handleNode","as","tag","useInView","setRef","current","Array","isArray","useEffect","result"],"mappings":"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","sourcesContent":["import { ObserverInstanceCallback } from './index';\n\nconst ObserverMap = new Map<\n  string,\n  {\n    id: string;\n    observer: IntersectionObserver;\n    elements: Map<Element, Array<ObserverInstanceCallback>>;\n  }\n>();\n\nconst RootIds: Map<Element, string> = new Map();\n\nlet rootId = 0;\n\n/**\n * Generate a unique ID for the root element\n * @param root\n */\nfunction getRootId(root?: Element | null) {\n  if (!root) return '0';\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n\n/**\n * Convert the options to a string Id, based on the values.\n * Ensures we can reuse the same observer when observing elements with the same options.\n * @param options\n */\nexport function optionsToId(options: IntersectionObserverInit) {\n  return Object.keys(options)\n    .filter(Boolean)\n    .sort()\n    .map((key) => {\n      return `${key}_${\n        key === 'root' ? getRootId(options.root) : options[key]\n      }`;\n    })\n    .toString();\n}\n\nfunction createObserver(options: IntersectionObserverInit) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  let id = optionsToId(options);\n  let instance = ObserverMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map<Element, Array<ObserverInstanceCallback>>();\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView =\n          entry.isIntersecting &&\n          observer.thresholds.some(\n            (threshold) => entry.intersectionRatio >= threshold,\n          );\n\n        // @ts-ignore support IntersectionObserver v2\n        if (options.trackVisibility && typeof entry.isVisible === 'undefined') {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        elements.get(entry.target)?.forEach((callback) => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n\n    instance = {\n      id,\n      observer,\n      elements,\n    };\n\n    ObserverMap.set(id, instance);\n  }\n\n  return instance;\n}\n\nexport function observe(\n  element: Element,\n  callback: ObserverInstanceCallback,\n  options: IntersectionObserverInit = {},\n) {\n  if (!element) return () => {};\n  // An observer with the same options can be reused, so lets use this fact\n  const { id, observer, elements } = createObserver(options);\n\n  // Register the callback listener for this element\n  let callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      ObserverMap.delete(id);\n    }\n  };\n}\n","import * as React from 'react';\nimport { IntersectionObserverProps, PlainChildrenProps } from './index';\nimport { observe } from './observers';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nfunction isPlainChildren(\n  props: IntersectionObserverProps | PlainChildrenProps,\n): props is PlainChildrenProps {\n  return typeof props.children !== 'function';\n}\n\n/**\n * Monitors scroll, and triggers the children function with updated props\n */\nexport class InView extends React.Component<\n  IntersectionObserverProps | PlainChildrenProps,\n  State\n> {\n  static displayName = 'InView';\n  static defaultProps = {\n    threshold: 0,\n    triggerOnce: false,\n    initialInView: false,\n  };\n\n  constructor(props: IntersectionObserverProps | PlainChildrenProps) {\n    super(props);\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined,\n    };\n  }\n\n  componentDidUpdate(prevProps: IntersectionObserverProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (\n      prevProps.rootMargin !== this.props.rootMargin ||\n      prevProps.root !== this.props.root ||\n      prevProps.threshold !== this.props.threshold ||\n      prevProps.skip !== this.props.skip ||\n      prevProps.trackVisibility !== this.props.trackVisibility ||\n      prevProps.delay !== this.props.delay\n    ) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n    this.node = null;\n  }\n\n  node: Element | null = null;\n  _unobserveCb: (() => void) | null = null;\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const { threshold, root, rootMargin, trackVisibility, delay } = this.props;\n\n    this._unobserveCb = observe(this.node, this.handleChange, {\n      threshold,\n      root,\n      rootMargin,\n      // @ts-ignore\n      trackVisibility,\n      // @ts-ignore\n      delay,\n    });\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n\n  handleNode = (node?: Element | null) => {\n    if (this.node) {\n      // Clear the old observer, before we start observing a new element\n      this.unobserve();\n\n      if (!node && !this.props.triggerOnce && !this.props.skip) {\n        // Reset the state if we get a new node, and we aren't ignoring updates\n        this.setState({ inView: !!this.props.initialInView, entry: undefined });\n      }\n    }\n    this.node = node ? node : null;\n    this.observeNode();\n  };\n\n  handleChange = (inView: boolean, entry: IntersectionObserverEntry) => {\n    if (inView && this.props.triggerOnce) {\n      // If `triggerOnce` is true, we should stop observing the element.\n      this.unobserve();\n    }\n    if (!isPlainChildren(this.props)) {\n      // Store the current State, so we can pass it to the children in the next render update\n      // There's no reason to update the state for plain children, since it's not used in the rendering.\n      this.setState({ inView, entry });\n    }\n    if (this.props.onChange) {\n      // If the user is actively listening for onChange, always trigger it\n      this.props.onChange(inView, entry);\n    }\n  };\n\n  render() {\n    if (!isPlainChildren(this.props)) {\n      const { inView, entry } = this.state;\n      return this.props.children({ inView, entry, ref: this.handleNode });\n    }\n\n    const {\n      children,\n      as,\n      tag,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      initialInView,\n      ...props\n    } = this.props;\n\n    return React.createElement(\n      as || tag || 'div',\n      { ref: this.handleNode, ...props },\n      children,\n    );\n  }\n}\n","import * as React from 'react';\nimport { InViewHookResponse, IntersectionOptions } from './index';\nimport { useEffect } from 'react';\nimport { observe } from './observers';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nexport function useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n}: IntersectionOptions = {}): InViewHookResponse {\n  const unobserve = React.useRef<Function>();\n  const [state, setState] = React.useState<State>({\n    inView: !!initialInView,\n  });\n\n  const setRef = React.useCallback(\n    (node) => {\n      if (unobserve.current !== undefined) {\n        unobserve.current();\n        unobserve.current = undefined;\n      }\n\n      // Skip creating the observer\n      if (skip) return;\n\n      if (node) {\n        unobserve.current = observe(\n          node,\n          (inView, entry) => {\n            setState({ inView, entry });\n\n            if (entry.isIntersecting && triggerOnce && unobserve.current) {\n              // If it should only trigger once, unobserve the element after it's inView\n              unobserve.current();\n              unobserve.current = undefined;\n            }\n          },\n          {\n            root,\n            rootMargin,\n            threshold,\n            // @ts-ignore\n            trackVisibility,\n            // @ts-ignore\n            delay,\n          },\n        );\n      }\n    },\n    // We break the rule here, because we aren't including the actual `threshold` variable\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      // If the threshold is an array, convert it to a string so it won't change between renders.\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      Array.isArray(threshold) ? threshold.toString() : threshold,\n      root,\n      rootMargin,\n      triggerOnce,\n      skip,\n      trackVisibility,\n      delay,\n    ],\n  );\n\n  /* eslint-disable-next-line */\n  useEffect(() => {\n    if (!unobserve.current && state.entry && !triggerOnce && !skip) {\n      // If we don't have a ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n      // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n      setState({\n        inView: !!initialInView,\n      });\n    }\n  });\n\n  const result = [setRef, state.inView, state.entry] as InViewHookResponse;\n\n  // Support object destructuring, by adding the specific values.\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n\n  return result;\n}\n"]},"metadata":{},"sourceType":"module"}